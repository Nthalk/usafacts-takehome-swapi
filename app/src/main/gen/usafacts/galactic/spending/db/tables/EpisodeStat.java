/*
 * This file is generated by jOOQ.
 */
package usafacts.galactic.spending.db.tables;


import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import usafacts.galactic.spending.db.DefaultSchema;
import usafacts.galactic.spending.db.tables.records.EpisodeStatRecord;


/**
 * The table <code>episode_stat</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EpisodeStat extends TableImpl<EpisodeStatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>episode_stat</code>
     */
    public static final EpisodeStat EPISODE_STAT = new EpisodeStat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpisodeStatRecord> getRecordType() {
        return EpisodeStatRecord.class;
    }

    /**
     * The column <code>episode_stat.episode</code>.
     */
    public final TableField<EpisodeStatRecord, Integer> EPISODE = createField(DSL.name("episode"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>episode_stat.total_ships</code>.
     */
    public final TableField<EpisodeStatRecord, Integer> TOTAL_SHIPS = createField(DSL.name("total_ships"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>episode_stat.total_cost</code>.
     */
    public final TableField<EpisodeStatRecord, BigDecimal> TOTAL_COST = createField(DSL.name("total_cost"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>episode_stat.total_length</code>.
     */
    public final TableField<EpisodeStatRecord, BigDecimal> TOTAL_LENGTH = createField(DSL.name("total_length"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>episode_stat.total_cargo_capacity</code>.
     */
    public final TableField<EpisodeStatRecord, BigDecimal> TOTAL_CARGO_CAPACITY = createField(DSL.name("total_cargo_capacity"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>episode_stat.avg_cost</code>.
     */
    public final TableField<EpisodeStatRecord, BigDecimal> AVG_COST = createField(DSL.name("avg_cost"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>episode_stat.avg_average_length</code>.
     */
    public final TableField<EpisodeStatRecord, BigDecimal> AVG_AVERAGE_LENGTH = createField(DSL.name("avg_average_length"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>episode_stat.avg_average_cargo_capacity</code>.
     */
    public final TableField<EpisodeStatRecord, BigDecimal> AVG_AVERAGE_CARGO_CAPACITY = createField(DSL.name("avg_average_cargo_capacity"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>episode_stat.avg_cost_per_length</code>.
     */
    public final TableField<EpisodeStatRecord, BigDecimal> AVG_COST_PER_LENGTH = createField(DSL.name("avg_cost_per_length"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>episode_stat.avg_cost_per_cargo_size</code>.
     */
    public final TableField<EpisodeStatRecord, BigDecimal> AVG_COST_PER_CARGO_SIZE = createField(DSL.name("avg_cost_per_cargo_size"), SQLDataType.NUMERIC, this, "");

    private EpisodeStat(Name alias, Table<EpisodeStatRecord> aliased) {
        this(alias, aliased, null);
    }

    private EpisodeStat(Name alias, Table<EpisodeStatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>episode_stat</code> table reference
     */
    public EpisodeStat(String alias) {
        this(DSL.name(alias), EPISODE_STAT);
    }

    /**
     * Create an aliased <code>episode_stat</code> table reference
     */
    public EpisodeStat(Name alias) {
        this(alias, EPISODE_STAT);
    }

    /**
     * Create a <code>episode_stat</code> table reference
     */
    public EpisodeStat() {
        this(DSL.name("episode_stat"), null);
    }

    public <O extends Record> EpisodeStat(Table<O> child, ForeignKey<O, EpisodeStatRecord> key) {
        super(child, key, EPISODE_STAT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public EpisodeStat as(String alias) {
        return new EpisodeStat(DSL.name(alias), this);
    }

    @Override
    public EpisodeStat as(Name alias) {
        return new EpisodeStat(alias, this);
    }

    @Override
    public EpisodeStat as(Table<?> alias) {
        return new EpisodeStat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EpisodeStat rename(String name) {
        return new EpisodeStat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpisodeStat rename(Name name) {
        return new EpisodeStat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpisodeStat rename(Table<?> name) {
        return new EpisodeStat(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
