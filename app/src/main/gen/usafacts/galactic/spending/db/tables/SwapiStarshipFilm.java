/*
 * This file is generated by jOOQ.
 */
package usafacts.galactic.spending.db.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import usafacts.galactic.spending.db.DefaultSchema;
import usafacts.galactic.spending.db.Keys;
import usafacts.galactic.spending.db.tables.records.SwapiStarshipFilmRecord;


/**
 * The table <code>swapi_starship_film</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SwapiStarshipFilm extends TableImpl<SwapiStarshipFilmRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>swapi_starship_film</code>
     */
    public static final SwapiStarshipFilm SWAPI_STARSHIP_FILM = new SwapiStarshipFilm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SwapiStarshipFilmRecord> getRecordType() {
        return SwapiStarshipFilmRecord.class;
    }

    /**
     * The column <code>swapi_starship_film.starship_id</code>.
     */
    public final TableField<SwapiStarshipFilmRecord, Integer> STARSHIP_ID = createField(DSL.name("starship_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>swapi_starship_film.film_id</code>.
     */
    public final TableField<SwapiStarshipFilmRecord, Integer> FILM_ID = createField(DSL.name("film_id"), SQLDataType.INTEGER, this, "");

    private SwapiStarshipFilm(Name alias, Table<SwapiStarshipFilmRecord> aliased) {
        this(alias, aliased, null);
    }

    private SwapiStarshipFilm(Name alias, Table<SwapiStarshipFilmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>swapi_starship_film</code> table reference
     */
    public SwapiStarshipFilm(String alias) {
        this(DSL.name(alias), SWAPI_STARSHIP_FILM);
    }

    /**
     * Create an aliased <code>swapi_starship_film</code> table reference
     */
    public SwapiStarshipFilm(Name alias) {
        this(alias, SWAPI_STARSHIP_FILM);
    }

    /**
     * Create a <code>swapi_starship_film</code> table reference
     */
    public SwapiStarshipFilm() {
        this(DSL.name("swapi_starship_film"), null);
    }

    public <O extends Record> SwapiStarshipFilm(Table<O> child, ForeignKey<O, SwapiStarshipFilmRecord> key) {
        super(child, key, SWAPI_STARSHIP_FILM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SwapiStarshipFilmRecord> getPrimaryKey() {
        return Keys.SWAPI_STARSHIP_FILM__SWAPI_STARSHIP_FILM_PK;
    }

    @Override
    public SwapiStarshipFilm as(String alias) {
        return new SwapiStarshipFilm(DSL.name(alias), this);
    }

    @Override
    public SwapiStarshipFilm as(Name alias) {
        return new SwapiStarshipFilm(alias, this);
    }

    @Override
    public SwapiStarshipFilm as(Table<?> alias) {
        return new SwapiStarshipFilm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SwapiStarshipFilm rename(String name) {
        return new SwapiStarshipFilm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SwapiStarshipFilm rename(Name name) {
        return new SwapiStarshipFilm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SwapiStarshipFilm rename(Table<?> name) {
        return new SwapiStarshipFilm(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
